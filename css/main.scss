// this is an object within SASS, which can hold different variables such as COLORS, sizing properties, etc.
$colors: (
  primary: #005dff,
  primary-light: lighten(#005dff, 40%),
  primary-dark: darken(#005dff, 40%),
  accent: #fff6bb
);

// regular variables being defined for use here. ensures consistency where these particular variables are used.
// It can be painful to change all the hardcoded padding values all at once.
$padding: 15px;
$borders: 15px;

// For the sake of the tutorial, the author decided to simplify the color calling by creating a color get function.
// User provides color name as an arg, and then the function returns the specified color name.
@function color($color-name) {
  @return map-get($colors, $color-name);
}

$desktop: 840px;

// mixins. where things get doicey
// mixin here was defined so that we can apply desktop responsiveness to key elements.
// syntax here wylin b.

@mixin desktop {
  @media (min-width: #{$desktop}) {
    @content;
  }
}

body,
html {
  height: 100%;
}

// nesting css rather than having to specify outside in all the damn time!!!

body {
  font-family: 'Montserrat', sans-serif;
  margin: 0;

  #bg {
    clip-path: polygon(100% 0, 100% 70%, 48% 100%, 0 100%, 0 0);
    background-color: color(primary);
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: -1;
    // mixin inclusion. changing the way that the background looks. this is done with the help of clip path.
    @include desktop {
      clip-path: polygon(0 0, 75% 0, 55% 100%, 0% 100%);
    }
  }
  header a {
    color: #fff;
    padding: $padding;
    display: block;
    text-decoration: none;
    text-transform: uppercase;
  }
}
// grid system used here. will have to familiarize myself more with this grid.
main {
  @include desktop {
    display: grid;
    grid-template-columns: 50% auto;
    grid-template-areas: 'primary card';
  }

  section#card {
    background: #fff;
    padding: 20px;
    margin: 1em auto;
    border-radius: $borders;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    width: 80%;
    // more elegant way to include media queries as one can see.
    @include desktop {
      grid-area: card;
      height: fit-content;
      align-self: center;
      margin: 1em;
    }
  }
  // peep this ne$ting my dude
  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;

    li {
      margin-bottom: 10px;
      span {
        position: absolute;
        content: ' ';
        width: 30px;
        height: 30px;
        background-color: color(primary-light);
        border-radius: 50%;
        margin-right: 10px;
      }
      strong {
        display: inline-block;
        margin-left: max(40px);
        margin-top: 10px;
      }
    }
  }
  section#primary {
    color: #fff;
    padding: $padding;
    text-align: center;

    @include desktop {
      grid-area: primary;
      text-align: left;
      margin: 4em 0 0 4em;
    }

    h1 {
      font-size: 3em;
      margin-top: 10px;
      text-transform: uppercase;

      @include desktop {
        width: 30%;
        font-size: 4em;
        line-height: 0.9em;
      }
    }
    p {
      font-size: 1.4em;
    }
    a {
      color: color(primary-dark);
      border-radius: $borders;
      text-decoration: none;
      text-transform: uppercase;
      font-weight: bold;
      background-color: color(accent);
      display: block;
      text-align: center;
      margin: 50px auto 0 auto;
      padding: $padding;
      // SASS lets you do math on variables!
      @include desktop {
        display: inline-block;
        padding: $padding $padding * 4;
      }
    }
  }
}
